import os
import uuid
import tempfile
import zipfile
import numpy as np
import pandas as pd
from PIL import Image
import gradio as gr
from ultralytics import YOLO

# 1) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
MODEL_PATH = os.path.join(os.path.dirname(__file__), "..", "models", "best.pt")
model = YOLO(MODEL_PATH)
CLASS_NAMES = model.names

# 2) –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∏ –≤ ZIP
def detect(image, conf_threshold, selected_classes):
    results = model(image, conf=conf_threshold, verbose=False)[0]
    records = []
    for *box, score, cls_id in results.boxes.data.tolist():
        x1, y1, x2, y2 = map(int, box)
        score = float(score)
        cls_id = int(cls_id)
        cls_name = CLASS_NAMES[cls_id]
        if selected_classes and cls_name not in selected_classes:
            continue
        records.append({
            "class": cls_name,
            "confidence": round(score, 3),
            "x1": x1, "y1": y1,
            "x2": x2, "y2": y2
        })
    annotated = results.plot()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º png –∏ csv –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP
    tmp_dir = tempfile.mkdtemp()
    img_path = os.path.join(tmp_dir, "annotated.png")
    csv_path = os.path.join(tmp_dir, "boxes.csv")
    zip_path = os.path.join(tmp_dir, f"results_{uuid.uuid4().hex}.zip")
    Image.fromarray(annotated).save(img_path)
    pd.DataFrame(records).to_csv(csv_path, index=False)
    with zipfile.ZipFile(zip_path, "w") as zf:
        zf.write(img_path, arcname="annotated.png")
        zf.write(csv_path, arcname="boxes.csv")
    return annotated, pd.DataFrame(records), zip_path

# 3) –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
examples_folder = os.path.join(os.path.dirname(__file__), "..", "data", "test", "images")
example_files = []
if os.path.isdir(examples_folder):
    for fname in sorted(os.listdir(examples_folder)):
        if fname.lower().endswith((".jpg", ".jpeg", ".png")):
            example_files.append(os.path.join(examples_folder, fname))
    example_files = example_files[:6]  # –ø–µ—Ä–≤—ã–µ 6 –ø—Ä–∏–º–µ—Ä–æ–≤

# 4) –°—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Blocks
with gr.Blocks(css=".gr-button {background: #008CBA; color: white}") as demo:
    gr.Markdown("# üè† LayoutVision")
    gr.Markdown("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–ª–∞–Ω–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã")

    with gr.Row():
        with gr.Column(scale=1):
            input_img = gr.Image(type="pil", label="1) –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–∞–Ω")
            conf = gr.Slider(0.0, 1.0, value=0.25, step=0.01, label="2) –ü–æ—Ä–æ–≥ confidence")
            run = gr.Button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é")
            # –ë–ª–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
            if example_files:
                gr.Examples(
                    examples=example_files,
                    inputs=[input_img],
                    label="üìÇ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞",
                    examples_per_page=6
                )
        with gr.Column(scale=1):
            out_img = gr.Image(type="numpy", label="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç")
            out_table = gr.Dataframe(
                headers=["class","confidence","x1","y1","x2","y2"],
                label="üìä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–æ–∫—Å–æ–≤"
            )
            out_zip = gr.File(label="üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # 5) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    run.click(
        fn=detect,
        inputs=[input_img, conf],
        outputs=[out_img, out_table, out_zip]
    )

# 6) –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è    
if __name__ == "__main__":
    demo.launch(inbrowser=True, server_name="0.0.0.0", server_port=7860)